#ifndef BIRD_H
#define BIRD_H

#include "entity.h"

#include "../engine/render.h"

#define BIRD_SPAWN_SPREAD 50

typedef struct bird{
  int x;
  int y;
  int xSpeed;

  int animationFrame;
} bird;

#define BIRD_ANIMATION_FRAMES 30

#define BIRD_SPRITE_WIDTH 21
#define BIRD_SPRITE_HEIGHT 18
#define BIRD_SPRITE_SCALE 2

int BIRD_SPRITE_1[BIRD_SPRITE_HEIGHT][BIRD_SPRITE_WIDTH] = {
  {C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_BLACK, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS},
  {C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_BLACK, C_BLACK, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS},
  {C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_BLACK, C_BLACK, C_BLACK, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS},
  {C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_BLACK, C_TRANS, C_TRANS, C_BLACK, C_BLACK, C_BLACK, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS},
  {C_TRANS, C_TRANS, C_TRANS, C_BLACK, C_BLACK, C_TRANS, C_TRANS, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS},
  {C_TRANS, C_TRANS, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_TRANS, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS},
  {C_TRANS, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_TRANS, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS},
  {C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS},
  {C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS},
  {C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK},
  {C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_TRANS, C_TRANS, C_TRANS},
  {C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_TRANS},
  {C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_TRANS, C_TRANS, C_TRANS, C_TRANS},
  {C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS},
  {C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS},
  {C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS},
  {C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS},
  {C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS}
};

int BIRD_SPRITE_2[BIRD_SPRITE_HEIGHT][BIRD_SPRITE_WIDTH] = {
  {C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS},
  {C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS},
  {C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS},
  {C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_BLACK, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS},
  {C_TRANS, C_TRANS, C_TRANS, C_BLACK, C_BLACK, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS},
  {C_TRANS, C_TRANS, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS},
  {C_TRANS, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS},
  {C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS},
  {C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS},
  {C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK},
  {C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_TRANS, C_TRANS, C_TRANS},
  {C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_TRANS},
  {C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_TRANS, C_TRANS, C_TRANS, C_TRANS},
  {C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS},
  {C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_BLACK, C_BLACK, C_BLACK, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS},
  {C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_BLACK, C_BLACK, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS},
  {C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_BLACK, C_BLACK, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS},
  {C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_BLACK, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS, C_TRANS}
};

void spawnRandomBird(bird* pBird, int ground, int prevCactus, double currentSpeed) {
  int level = rand() % 3;

  int yCoord = ground - (BIRD_SPRITE_HEIGHT * BIRD_SPRITE_SCALE) - (28 * level);

  pBird->x = calculateDistance(prevCactus, currentSpeed, BIRD_SPAWN_SPREAD);
  pBird->y = yCoord;
  pBird->animationFrame = 0;
}

int isBirdOffScreen(bird* pBird, int currentX) {
  int width = BIRD_SPRITE_WIDTH * BIRD_SPRITE_SCALE;

  return pBird->x + width < currentX;
}

void renderBird(bird* pBird, int currentX) {
  int renderX = pBird->x - currentX;
  if (pBird->animationFrame < BIRD_ANIMATION_FRAMES / 2) {
    renderSprite(
      renderX,
      pBird->y,
      BIRD_SPRITE_HEIGHT,
      BIRD_SPRITE_WIDTH,
      BIRD_SPRITE_1,
      BIRD_SPRITE_SCALE
    );
  } else {
    renderSprite(
      renderX,
      pBird->y,
      BIRD_SPRITE_HEIGHT,
      BIRD_SPRITE_WIDTH,
      BIRD_SPRITE_2,
      BIRD_SPRITE_SCALE
    );
  }

  pBird->animationFrame = (pBird->animationFrame + 1) % BIRD_ANIMATION_FRAMES;
}

int* getBirdSprite(bird* pBird) {
  if (pBird->animationFrame < BIRD_ANIMATION_FRAMES / 2) {
    return (int*) &BIRD_SPRITE_1;
  } else {
    return (int*) &BIRD_SPRITE_2;
  }
  
  return 0;
}

int getBirdSpriteHeight() {
  return BIRD_SPRITE_HEIGHT;
}
int getBirdSpriteWidth() {
  return BIRD_SPRITE_WIDTH;
}

RECT getBirdRect(bird* pBird, int currentX) {
  RECT result = {
    .x = pBird->x - currentX,
    .y = pBird->y,
    .width = BIRD_SPRITE_WIDTH * BIRD_SPRITE_SCALE,
    .height = BIRD_SPRITE_HEIGHT * BIRD_SPRITE_SCALE
  };

  return result;
}

#endif